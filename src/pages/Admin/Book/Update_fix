import {List, Datagrid, SimpleForm, TextField, TextInput, DateInput, DateField, required,} from 'react-admin';
import { EditDialog } from '@react-admin/ra-form-layout';
import { useNavigate } from 'react-router-dom';
import React, { useState } from 'react';
import axios from 'axios';

const Updated = () => {
    const[bookName, setBookName] = useState('')
    const[author, setAuthor] = useState('')
    const[publisher, setPublisher] = useState('')
    const[bookPrice, setBookPrice] = useState('')
    const[bookDescription, setBookDescription] = useState('')
    const[picture, setPicture] = useState(null)
    const[readCount, setReadCount] = useState(0)
    const[star, setStar] = useState(0)
    const[isFavorite, setIsFavorite] = useState(false)
    const[createdAt, setCreatedAt] = useState('')
    const[updatedAt, setUpdatedAt] = useState('')

    const[error,setErrors]= useState({
        bookName: '',
        author: '',
        publisher: '',
        bookPrice: '',
        bookDescription: '',
        picture: '',
        readCount: '',
        star: '',
        isFavorite: '',
        createdAt: '',
        updatedAt: ''
        })

    useEffect(() => {
        if(bookId){
            }
        const getBook = async () => {
          try {
            const response = await axios.get("http://localhost:8080/book/books" + ${bookId});
            setBooks(response.data);
            setErrFetch(response.data);
          } catch (error) {
            setErrFetch("Network problem or server not working");
            console.log("Error fetching books: " + error);
          }
        };

        getBook();
      }, []);
    const navigator = useNavigate();

    function updateBook(bookId){
        console.log(bookId);
        const updateBook = await axios.put("http://localhost:8080/book/books" + "/" + ${bookId},books);
        if(bookId){
            updateBook = (bookId, book).then((response) => {
                console.log(response.data);
                navigator("/books")
                })catch(error){
                    console.error('Error updating book:', error);
                    alert('Failed to update the book. Please check the ID.');
                  }
            }}

  return (
      <div className="content">
            <div className="container">
              <h2 className="mb-5">Books</h2>
              <div className="table-responsive">
                <table className="table custom-table">
                  <thead>
                    <tr style={{ textTransform: "uppercase" }}>
                      <th scope="col">Book ID</th>
                      <th scope="col">Category ID</th>
                      <th scope="col">Book Name</th>
                      <th scope="col">Author</th>
                      <th scope="col">Publisher</th>
                      <th scope="col">Price</th>
                      <th scope="col">Description</th>
                      <th scope="col">Picture</th>
                      <th scope="col">Read Count</th>
                      <th scope="col">Star</th>
                      <th scope="col">Favorite</th>
                      <th scope="col">Created At</th>
                      <th scope="col">Updated At</th>
                      <th scope="col"> Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Array.isArray(books) && books.length > 0 ? (
                      books.map((book) => (
                        <tr key={book.bookId}>
                          <td>{book.bookId}</td>
                          <td>{book.categoryId}</td>
                          <td>{book.bookName}</td>
                          <td>{book.author}</td>
                          <td>{book.publisher}</td>
                          <td>{book.bookPrice}</td>
                          <td>{book.bookDescription}</td>
                          <td>
                            <img src={book.picture} alt={book.bookName} width="50" />
                          </td>
                          <td>{book.readCount}</td>
                          <td>{book.star}</td>
                          <td>{book.isFavorite ? "Yes" : "No"}</td>
                          <td>{new Date(book.createdAt).toLocaleDateString()}</td>
                          <td>{new Date(book.updatedAt).toLocaleDateString()}</td>
                          <td>
                              <button className = 'btn btn-danger' onClick= {() => updateBook(book.bookId)}>Updated</button>
                        </tr>
                      ))
                    ) : (
                      <tr>
                        <td colSpan={13} style={{ textAlign: "center" }}>
                          {errFetch}
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

  );
};

export default Delete;
